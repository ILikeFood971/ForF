plugins {
	id "fabric-loom" version "${loom_version}" apply false
	id "com.github.hierynomus.license" version "${licence_version}" apply false

	// https://github.com/ReplayMod/preprocessor
	// https://github.com/Fallen-Breath/preprocessor
	id "com.replaymod.preprocess" version "${preprocessor_version}"
	// https://github.com/Fallen-Breath/yamlang
	// https://github.com/ILikeFood971/yamlang
	id "me.fallenbreath.yamlang" version "${yamlang_version}" apply false
}

preprocess {
	def mc119      = createNode('1.19.4'  , 1_19_04, 'yarn')
	def mc1201     = createNode('1.20.1'  , 1_20_01, 'yarn')
	def mc1202     = createNode('1.20.2'  , 1_20_02, 'yarn')
	def mc1204     = createNode('1.20.4'  , 1_20_04, 'yarn')

	mc1201.link(mc119, file('versions/mapping-1.20.1-1.19.4.txt'))
	mc1202.link(mc1201, file('versions/mapping-1.20.2-1.20.1.txt'))
	mc1204.link(mc1202, file('versions/mapping-1.20.4-1.20.2.txt'))
}
tasks.register('buildAndGather') {
	subprojects {
		dependsOn project.tasks.named('build').get()
	}
	doFirst {
		println 'Gathering builds'
		def buildLibs = {
			p -> p.buildDir.toPath().resolve('libs')
		}
		delete fileTree(buildLibs(rootProject)) {
			include '*'
		}
		subprojects {
			copy {
				from(buildLibs(project)) {
					include '*.jar'
					exclude '*-dev.jar', '*-sources.jar'
				}
				into buildLibs(rootProject)
				duplicatesStrategy DuplicatesStrategy.INCLUDE
			}
		}
	}
}
