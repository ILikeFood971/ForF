//file:noinspection GrUnresolvedAccess
apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'


int mcVersion = project.mcVersion

preprocess {
    tabIndentation = true
}

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://maven.nucleoid.xyz' }
    mavenCentral()
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Config Json handler
    api(include("blue.endless:jankson:1.2.3"))

    // Server side libraries
    modImplementation include("eu.pb4:sgui:[$project.sgui_version]")

    if (mcVersion < 12000) {
        modImplementation include("fr.catcore:server-translations-api:[$project.server_translations_version]")
    } else {
        modImplementation include("xyz.nucleoid:server-translations-api:[$project.server_translations_version]")
    }
    modImplementation include("eu.pb4:polymer-core:[$project.polymer_core_version]")
}


loom {
    accessWidenerPath = file("forf.accesswidener")
    runs {
        mixinAudit {
            server()
            vmArgs '-Dforf.mixin_audit=true'
            ideConfigGenerated false
        }
    }
    mods {
        "forf" {
            sourceSet sourceSets.main
        }
    }

}

remapJar {
    remapperIsolation = true
}
if (mcVersion >= 11800) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
} else {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

String versionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
}
String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
archivesBaseName = project.archives_base_name + '-mc' + project.minecraft_version


processResources {
    from "forf.accesswidener"

    inputs.property "mod_id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", project.version
    inputs.property "minecraft_dependency", project.minecraft_dependency

    filesMatching("fabric.mod.json") {
        expand  "version"                    : mod_version,
                "mod_id"                     : mod_id,
                "mod_name"                   : mod_name,
                "minecraft_version"          : minecraft_version,
                "java_version"               : java_version,
                "fabric_loader_version"      : fabric_loader_version,
                "fabric_api_version"         : fabric_api_version,
                "sgui_version"               : sgui_version,
                "minecraft_dependency"       : minecraft_dependency,
                "voicechat_version"          : voicechat_version,
                "server_translations_version": server_translations_version,
                "polymer_core_version"       : polymer_core_version
    }
}

yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = "assets/forf/lang"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project.archives_base_name}" }
    }
}
license {
    // use "gradle licenseFormat" to apply license headers
    header = rootProject.file('HEADER.txt')
    include '**/*.java'
    skipExistingHeaders = true

    headerDefinitions {
        // ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
        // modification: add a newline at the end
        SLASHSTAR_STYLE_NEWLINE {
            firstLine = "/*"
            beforeEachLine = " * "
            endLine = " */" + System.lineSeparator()
            afterEachLine = ""
            skipLinePattern = null
            firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
            lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
            allowBlankLines = false
            isMultiline = true
            padLines = false
        }
    }
    mapping {
        java = 'SLASHSTAR_STYLE_NEWLINE'
    }
    ext {
        name = project.mod_name
        author = 'ILikeFood971'
        year = Calendar.getInstance().get(Calendar.YEAR).toString()
    }
}

classes.dependsOn licenseFormatMain
testClasses.dependsOn licenseFormatTest


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}