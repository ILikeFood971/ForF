//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAssignabilityCheck
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

preprocess {
    tabIndentation = true
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://maven.nucleoid.xyz' } // Polymer, Server translations, sgui
    mavenCentral()
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Config Json handler
    api include("blue.endless:jankson:${project.jankson_version}")

    // Server side libraries
    modImplementation include("eu.pb4:sgui:${project.sgui_version}")
    modImplementation include("xyz.nucleoid:server-translations-api:${project.server_translations_version}")
    modImplementation include("eu.pb4:polymer-core:${project.polymer_core_version}")

    // Test
    testImplementation "org.junit.jupiter:junit-jupiter:${project.junit_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation "org.mockito:mockito-core:5.+"
}

test {
    useJUnitPlatform()

    testLogging {
        events 'passed'
    }
}

String LANG_DIR = 'assets/forf/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

loom {
    accessWidenerPath = file("forf.accesswidener")

    runs {
        client {
            ideConfigGenerated = false // Remove all the default run config for client
        }

        server {
            server()
            configName 'Server'
            source sourceSets.main
            runDir '../../run'
            vmArgs '-XX:+AllowEnhancedClassRedefinition',
                    '-DmixinAuditor.audit=true',
                    '-Dmixin.debug.export=true'
            ideConfigGenerated true
        }
    }

    runConfigs.configureEach {
        vmArgs '-enableassertions' // Enable assertions in the dev environment so things can be caught
    }
}

remapJar {
    remapperIsolation = true
}

String versionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
}

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
    // move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
    base.archivesName = project.archives_base_name + '+' + project.minecraft_version
    version = project.mod_version
} else {
    base.archivesName = project.archives_base_name
    version = project.mod_version + '+' + project.minecraft_version + versionSuffix
}

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    from "forf.accesswidener"

    inputs.property "version", mod_version
    inputs.property "mod_id", mod_id
    inputs.property "mod_name", mod_name
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "java_version", java_version
    inputs.property "fabric_loader_version", fabric_loader_version
    inputs.property "fabric_api_version", fabric_api_version
    inputs.property "sgui_version", sgui_version
    inputs.property "minecraft_dependency", minecraft_dependency
    inputs.property "voicechat_version", voicechat_version
    inputs.property "server_translations_version", server_translations_version
    inputs.property "polymer_core_version", polymer_core_version

    filesMatching("fabric.mod.json") {
        expand "version": mod_version,
                "mod_id": mod_id,
                "mod_name": mod_name,
                "minecraft_version": project.minecraft_version,
                "java_version": project.java_version,
                "fabric_loader_version": fabric_loader_version,
                "fabric_api_version": project.fabric_api_version,
                "sgui_version": project.sgui_version,
                "minecraft_dependency": project.minecraft_dependency,
                "voicechat_version": voicechat_version,
                "server_translations_version": project.server_translations_version,
                "polymer_core_version": project.polymer_core_version
    }
}

// https://github.com/Fallen-Breath/yamlang
// https://github.com/ILikeFood971/yamlang
yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = LANG_DIR
    outputDirs = [LANG_DIR, 'data/forf/lang']
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

java {
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project.archives_base_name}" }
    }
}

// https://github.com/hierynomus/license-gradle-plugin
license {
    // use "gradle licenseFormat" to apply license headers
    header = rootProject.file('HEADER.txt')
    include '**/*.java'
    skipExistingHeaders = true

    headerDefinitions {
        // ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
        // modification: add a newline at the end
        SLASHSTAR_STYLE_NEWLINE {
            firstLine = "/*"
            beforeEachLine = " * "
            endLine = " */" + System.lineSeparator()
            afterEachLine = ""
            skipLinePattern = null
            firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
            lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
            allowBlankLines = false
            isMultiline = true
            padLines = false
        }
    }
    mapping {
        java = 'SLASHSTAR_STYLE_NEWLINE'
    }
    ext {
        name = project.mod_name
        author = 'ILikeFood971'
        year = Calendar.getInstance().get(Calendar.YEAR).toString()
    }
}

classes.dependsOn licenseFormatMain
testClasses.dependsOn licenseFormatTest